<project xmlns="http://maven.apache.org/POM/4.0.0"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>

	<groupId>org.openpcm</groupId>
	<artifactId>openpcm-server</artifactId>
	<version>0.0.1-SNAPSHOT</version>
	<name>OpenPCM Server</name>

	<properties>
		<docker.tag>latest</docker.tag>

		<!-- build props -->
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
		<project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>

		<jacoco-maven-plugin.version>0.8.0</jacoco-maven-plugin.version>
		<spring.boot.version>2.0.5.RELEASE</spring.boot.version>
		<maven.compiler.version>3.7.0</maven.compiler.version>
		<maven.build.timestamp.format>yyyy-MM-dd_HH-mm</maven.build.timestamp.format>

		<!-- swagger props -->
		<swagger-maven-plugin-version>3.1.6</swagger-maven-plugin-version>
		<swagger-version>2.9.2</swagger-version>

		<!-- Make sure this matches the spring mockito.version in the spring boot 
			test -->
		<mockito.version>2.0.2-beta</mockito.version>
		<!-- make sure this is compatible with the above mockito.version -->
		<powermock.version>2.0.0-beta.5</powermock.version>

		<camel.version>2.20.2</camel.version>
		<maven.compiler.source>9</maven.compiler.source>
		<maven.compiler.target>9</maven.compiler.target>

		<maven-failsafe-plugin.version>2.22.0</maven-failsafe-plugin.version>
		<maven-surefire-plugin.version>2.22.0</maven-surefire-plugin.version>
	</properties>

	<dependencyManagement>
		<dependencies>
			<dependency>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-starter-parent</artifactId>
				<version>${spring.boot.version}</version>
				<type>pom</type>
				<scope>import</scope>
			</dependency>
		</dependencies>
	</dependencyManagement>

	<dependencies>
		<!-- Spring Dependencies -->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-web</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-actuator</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-security</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-data-jpa</artifactId>
		</dependency>

		<!-- Object Mapper Module Helper -->
		<dependency>
			<groupId>com.fasterxml.jackson.datatype</groupId>
			<artifactId>jackson-datatype-hibernate5</artifactId>
		</dependency>


		<!-- Spring Unit Tests -->
		<dependency>
			<groupId>org.springframework.security</groupId>
			<artifactId>spring-security-test</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-test</artifactId>
			<scope>test</scope>
			<exclusions>
				<exclusion>
					<groupId>junit</groupId>
					<artifactId>junit</artifactId>
				</exclusion>
			</exclusions>
		</dependency>

		<!-- Provide JUnit 5 API -->
		<dependency>
			<groupId>org.junit.jupiter</groupId>
			<artifactId>junit-jupiter-api</artifactId>
			<scope>test</scope>
		</dependency>
		<!-- and the engine for surefire and failsafe -->
		<dependency>
			<groupId>org.junit.jupiter</groupId>
			<artifactId>junit-jupiter-engine</artifactId>
			<scope>test</scope>
		</dependency>

		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-devtools</artifactId>
			<optional>true</optional>
		</dependency>
		<dependency>
			<groupId>javax.xml.bind</groupId>
			<artifactId>jaxb-api</artifactId>
		</dependency>

		<!-- JWT -->
		<dependency>
			<groupId>io.jsonwebtoken</groupId>
			<artifactId>jjwt</artifactId>
			<version>0.6.0</version>
		</dependency>

		<!-- Swagger Dependencies -->
		<dependency>
			<groupId>io.springfox</groupId>
			<artifactId>springfox-swagger2</artifactId>
			<version>${swagger-version}</version>
		</dependency>
		<dependency>
			<groupId>io.springfox</groupId>
			<artifactId>springfox-swagger-ui</artifactId>
			<version>${swagger-version}</version>
		</dependency>

		<!-- Camel Dependencies -->
		<!--<dependency> <groupId>org.apache.camel</groupId> <artifactId>camel-spring-boot-starter</artifactId> 
			<version>${camel.version}</version> </dependency> <dependency> <groupId>org.apache.camel</groupId> 
			<artifactId>camel-gson</artifactId> <version>${camel.version}</version> </dependency> 
			<dependency> <groupId>org.apache.camel</groupId> <artifactId>camel-hl7</artifactId> 
			<version>${camel.version}</version> </dependency> <dependency> <groupId>org.apache.camel</groupId> 
			<artifactId>camel-mina2</artifactId> <version>${camel.version}</version> 
			</dependency> <dependency> <groupId>org.apache.camel</groupId> <artifactId>camel-spring-boot</artifactId> 
			<version>${camel.version}</version> </dependency> <dependency> <groupId>org.apache.camel</groupId> 
			<artifactId>camel-test-spring</artifactId> <version>${camel.version}</version> 
			<scope>test</scope> </dependency> -->

		<!-- Database -->
		<dependency>
			<groupId>com.h2database</groupId>
			<artifactId>h2</artifactId>
		</dependency>

		<!-- Lombok Code generation -->
		<dependency>
			<groupId>org.projectlombok</groupId>
			<artifactId>lombok</artifactId>
			<scope>provided</scope>
		</dependency>

		<!-- JAXBY dependencies -->
		<dependency>
			<groupId>org.glassfish.jaxb</groupId>
			<artifactId>jaxb-runtime</artifactId>
			<version>2.3.0</version>
		</dependency>
		<dependency>
			<groupId>org.glassfish.jaxb</groupId>
			<artifactId>jaxb-xjc</artifactId>
			<version>2.3.0</version>
		</dependency>

		<!-- Testing Dependencies -->
		<dependency>
			<groupId>org.mockito</groupId>
			<artifactId>mockito-core</artifactId>
		</dependency>
		<dependency>
			<groupId>org.mockito</groupId>
			<artifactId>mockito-all</artifactId>
			<version>${mockito.version}</version>
		</dependency>
		<dependency>
			<groupId>org.powermock</groupId>
			<artifactId>powermock-core</artifactId>
			<version>${powermock.version}</version>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.powermock</groupId>
			<artifactId>powermock-module-junit4</artifactId>
			<version>${powermock.version}</version>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.powermock</groupId>
			<artifactId>powermock-api-mockito2</artifactId>
			<version>${powermock.version}</version>
			<scope>test</scope>
		</dependency>

		<!-- Temporary for migration <dependency> <groupId>org.springframework.boot</groupId> 
			<artifactId>spring-boot-properties-migrator</artifactId> <scope>runtime</scope> 
			</dependency> -->
	</dependencies>

	<build>
		<resources>
			<resource>
				<directory>src/main/resources</directory>
				<filtering>true</filtering>
			</resource>
		</resources>
		<plugins>

    <plugin>
      <groupId>com.spotify</groupId>
      <artifactId>docker-maven-plugin</artifactId>
      <version>1.1.1</version>
      <configuration>
        <imageName>openpcm</imageName>
        <dockerDirectory>./</dockerDirectory>
        <resources>
           <resource>
             <targetPath>/</targetPath>
             <directory>${project.build.directory}</directory>
             <include>${project.build.finalName}.jar</include>
           </resource>
        </resources>
<imageTags>
           <imageTag>${project.version}</imageTag>
           <imageTag>latest</imageTag>
        </imageTags></configuration>
  <dependencies>
    <dependency>
      <groupId>javax.activation</groupId>
      <artifactId>activation</artifactId>
      <version>1.1.1</version>
    </dependency>
  </dependencies>
     </plugin>		
	<plugin>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-maven-plugin</artifactId>
				<version>2.0.0.RELEASE</version>
				<executions>
					<execution>
						<goals>
							<goal>repackage</goal>
						</goals>
					</execution>
				</executions>
			</plugin>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-compiler-plugin</artifactId>
				<version>${maven.compiler.version}</version>
				<configuration>
					<fork>true</fork>
				</configuration>
			</plugin>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-surefire-plugin</artifactId>
				<version>2.21.0</version>
			</plugin>
			<plugin>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-maven-plugin</artifactId>
			</plugin>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-failsafe-plugin</artifactId>
				<version>${maven-failsafe-plugin.version}</version>
				<configuration>
				</configuration>
			</plugin>
			<plugin>
				<artifactId>maven-surefire-plugin</artifactId>
				<!-- latest version (2.20.1) does not work well with JUnit5 -->
				<dependencies>
					<dependency>
						<groupId>org.junit.platform</groupId>
						<artifactId>junit-platform-surefire-provider</artifactId>
						<version>1.3.1</version>
					</dependency>
					<dependency>
						<groupId>org.junit.jupiter</groupId>
						<artifactId>junit-jupiter-engine</artifactId>
						<version>5.1.1</version>
					</dependency>
				</dependencies>
			</plugin>
			<plugin>
				<groupId>org.jacoco</groupId>
				<artifactId>jacoco-maven-plugin</artifactId>
				<version>${jacoco-maven-plugin.version}</version>
			</plugin>
			<plugin>
				<groupId>com.github.kongchen</groupId>
				<artifactId>swagger-maven-plugin</artifactId>
				<version>${swagger-maven-plugin-version}</version>
				<configuration>
					<!--CHECK HERE FOR MORE CONFIG OPTIONS: https://github.com/kongchen/swagger-maven-plugin/blob/master/README.md -->
					<apiSources>
						<apiSource>
							<springmvc>true</springmvc>
							<host>159.203.100.175:14606</host>
							<basePath>/api/v1/</basePath>
							<locations>
								<location>org.openpcm</location>
							</locations>
							<schemes>
								<scheme>http</scheme>
							</schemes>
							<info>
								<title>OpenPCM Server REST API</title>
								<version>${project.version}</version>
								<description>
									Rest API for OpenPCM
								</description>
								<contact>
									<email>gsugambit@gmail.com</email>
									<name>Raymond King</name>
									<url>https://github.com/OpenPCM/openpcm-server</url>
								</contact>
								<termsOfService>
									hhttps://github.com/OpenPCM/openpcm-server/blob/master/LICENSE
								</termsOfService>
							</info>
							<templatePath>${basedir}/src/main/resources/templates/strapdown.html.hbs</templatePath>
							<outputPath>${basedir}/target/restapi/OpenPCM_SERVER_REST_API.html</outputPath>
							<swaggerDirectory>${basedir}/target/swagger/generated/swagger-ui</swaggerDirectory>
						</apiSource>
					</apiSources>
				</configuration>
				<executions>
					<execution>
						<phase>compile</phase>
						<goals>
							<goal>generate</goal>
						</goals>
					</execution>
				</executions>
			</plugin>
		</plugins>
		<pluginManagement>
			<plugins>
				<plugin>
					<groupId>org.jolokia</groupId>
					<artifactId>docker-maven-plugin</artifactId>
					<version>0.13.9</version>
					<configuration>

						<images>
							<image>
								<alias>${project.artifactId}</alias>
								<name>openpcm/openpcm-server:${docker.tag}</name>
								<build>
									<from>anapsix/alpine-java:9</from>
									<maintainer>${user.name}</maintainer>
									<assembly>
										<basedir>/</basedir>
										<descriptor>${project.build.outputDirectory}/docker/assembly.xml</descriptor>
									</assembly>
									<env>
									</env>
									<workdir>/${project.artifactId}</workdir>
									<entryPoint>
										<exec>
											<args>./entrypoint.sh</args>
										</exec>
									</entryPoint>
								</build>
								<run>
								</run>
							</image>
						</images>
					</configuration>
				</plugin>
				<plugin>
					<artifactId>maven-resources-plugin</artifactId>
					<version>3.0.2</version>
					<executions>
						<execution>
							<id>copy-resources</id>
							<!-- here the phase you need -->
							<phase>validate</phase>
							<goals>
								<goal>copy-resources</goal>
							</goals>
							<configuration>
								<outputDirectory>${basedir}/target/classes</outputDirectory>
								<resources>
									<resource>
										<directory>./</directory>
										<includes>
											<include>LICENSE</include>
										</includes>
										<excludes>
											<exlude>src/*</exlude>
										</excludes>
										<filtering>false</filtering>
									</resource>
								</resources>
							</configuration>
						</execution>
					</executions>
				</plugin>
			</plugins>
		</pluginManagement>
	</build>

	<profiles>
		<profile>
			<id>dockerize</id>
			<activation>
				<property>
					<name>dockerize</name>
				</property>
			</activation>
			<build>
				<plugins>
					<plugin>
						<groupId>org.jolokia</groupId>
						<artifactId>docker-maven-plugin</artifactId>
						<executions>
							<execution>
								<id>build-docker-images</id>
								<phase>pre-integration-test</phase>
								<goals>
									<goal>build</goal>
								</goals>
							</execution>
							<execution>
								<id>push-docker-images</id>
								<phase>install</phase>
								<goals>
									<goal>push</goal>
								</goals>
							</execution>
						</executions>
					</plugin>
				</plugins>
			</build>
		</profile>

		<profile>
			<id>docker-start</id>
			<activation>
				<property>
					<name>docker-start</name>
				</property>
			</activation>
			<build>
				<plugins>
					<plugin>
						<groupId>org.jolokia</groupId>
						<artifactId>docker-maven-plugin</artifactId>
						<executions>
							<execution>
								<id>build-docker-images</id>
								<phase>pre-integration-test</phase>
								<goals>
									<goal>start</goal>
								</goals>
							</execution>
						</executions>
					</plugin>
				</plugins>
			</build>
		</profile>

		<profile>
			<id>docker-stop</id>
			<activation>
				<property>
					<name>docker-stop</name>
				</property>
			</activation>
			<build>
				<plugins>
					<plugin>
						<groupId>org.jolokia</groupId>
						<artifactId>docker-maven-plugin</artifactId>
						<executions>
							<execution>
								<id>build-docker-images</id>
								<phase>pre-integration-test</phase>
								<goals>
									<goal>stop</goal>
								</goals>
							</execution>
						</executions>
					</plugin>
				</plugins>
			</build>
		</profile>

		<profile>
			<id>docker-clean</id>
			<activation>
				<property>
					<name>docker-clean</name>
				</property>
			</activation>
			<build>
				<plugins>
					<plugin>
						<groupId>org.jolokia</groupId>
						<artifactId>docker-maven-plugin</artifactId>
						<executions>
							<execution>
								<id>build-docker-images</id>
								<phase>pre-integration-test</phase>
								<goals>
									<goal>stop</goal>
									<goal>remove</goal>
								</goals>
							</execution>
						</executions>
					</plugin>
				</plugins>
			</build>
		</profile>
	</profiles>
</project>
